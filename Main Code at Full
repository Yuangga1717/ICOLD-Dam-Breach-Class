# -*- coding: utf-8 -*-
"""
Created on Fri Aug 15 22:56:59 2025

@author: Yuangga
"""

import os
import numpy as np
import rasterio
import matplotlib.pyplot as plt
from shapely.geometry import shape, mapping
import geopandas as gpd
from rasterio.features import shapes

# === Input ===
folder = r"E:\2. Work\Bendungan Sampeyan Baru\1. Model\result final"
depth_file = os.path.join(folder, "2. depth overtopping p14 loc2.tif")
velocity_file = os.path.join(folder, "1. velocity overtopping p13 loc1.tif")
output_folder = os.getcwd()
os.makedirs(output_folder, exist_ok=True)

# === Hazard lines (from you) ===
depth_line1 = np.array([0,0.05,0.10,0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65,0.70,0.75,0.80,0.85,0.90])
vel_line1   = np.array([3,2,1.62,1.42,1.25,1.13,1,0.9,0.8,0.74,0.65,0.57,0.52,0.45,0.39,0.33,0.25,0.15,0])

depth_line2 = np.array([0,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.15,1.2,1.25,1.3,0.65])
vel_line2   = np.array([4,3.6,3,2.61,2.32,2.1,1.96,1.86,1.78,1.7,1.64,1.57,1.51,1.45,1.4,1.35,1.3,1.24,1.18,1.1,1.03,0.92,0.82,0.72,0.59,0.45,0.25,0])

# === Step 1: Load rasters ===
print("Step 1: Reading rasters...")
with rasterio.open(depth_file) as src_d, rasterio.open(velocity_file) as src_v:
    depth = src_d.read(1, masked=True)
    velocity = src_v.read(1, masked=True)
    profile = src_d.profile

# === Step 2: Hazard classification ===
print("Step 2: Classifying hazard...")

hazard_class = np.zeros(depth.shape, dtype=np.uint8)

for i in range(depth.shape[0]):
    for j in range(depth.shape[1]):
        if depth.mask[i, j] or velocity.mask[i, j]:
            continue
        d = depth[i, j]
        v = velocity[i, j]

        v1 = np.interp(d, depth_line1, vel_line1)
        v2 = np.interp(d, depth_line2, vel_line2)

        if v > v1:
            hazard_class[i, j] = 3  # High
        elif v > v2:
            hazard_class[i, j] = 2  # Medium
        else:
            hazard_class[i, j] = 1  # Low

# === Step 3: Plot hazard map ===
print("Step 3: Plotting hazard map...")
plt.figure(figsize=(8,6))
cmap = plt.cm.get_cmap("RdYlGn_r", 3)  # 3 classes
plt.imshow(hazard_class, cmap=cmap)
plt.colorbar(ticks=[0,1,2,3], label="Hazard class")
plt.title("Hazard Classification Map")
plt.show()

# === Step 4: Export shapefiles per class ===
print("Step 4: Exporting shapefiles...")
transform = profile["transform"]

for cls in [1, 2, 3]:
    mask = hazard_class == cls
    if np.any(mask):
        print(f"  -> Exporting class {cls}...")
        shapes_gen = shapes(hazard_class.astype(np.int16), mask=mask, transform=transform)

        gdf = gpd.GeoDataFrame(
            [{"geometry": shape(geom), "hazard": cls} for geom, val in shapes_gen if val == cls],
            crs=src_d.crs
        )

        out_shp = os.path.join(output_folder, f"hazard_class_{cls}.shp")
        gdf.to_file(out_shp)
        print(f"     Saved {out_shp}")

print("=== Done! ===")
